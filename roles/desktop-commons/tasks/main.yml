- name: add apt repository keys
  tags:
    - basics
    - gui_basics
    - apt_keys
  apt_key: keyserver={{ item.server }}
           id={{ item.id }}
           state={{ item.state|default('present') }}
  with_items:
    - server: keys.gnupg.net
      owner: percona
      id: 1C4CBDCDCD2EFD2A

- name: add apt repositories to local list
  tags:
    - basics
    - gui_basics
    - apt_repositories
  apt_repository: repo="{{ item.1 }} {{ item.0.src }}"
                  state="{{ item.0.state|default('present') }}"
                  update_cache=no
  with_subelements:
    -
      - src: "http://repo.percona.com/apt trusty main"
        addr: ["deb", "deb-src"]
      - src: "http://repository.spotify.com stable non-free"
        addr: ["deb"]
        state: absent
    - addr

- name: update apt cache
  tags:
    - always
    - update-cache
  apt: update_cache=yes

- name: install most basic packages
  tags:
    - basics
    - apt
  apt: name={{ item }}
       state=latest
  with_items:
    - git
    - redshift
    - vim
    - wine
    - percona-server-client-5.6
    - zsh
    - wget
    - feh
    - mirage
    - curl
    - parallel
    - screen
    - rpm2cpio
    - subversion
    - nmap

# TODO: throws an error when executed for the first time
- name: install oh-my-zsh
  tags:
    - basics
    - configure-zsh
  shell: wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O - | sh
  sudo: no
  when: not all_cmds.results|has_cmd('ohmyzsh')

- name: set zsh as default shell
  tags:
    - basics
    - configure-zsh
  user: user={{ remote_user }}
        shell=/usr/bin/zsh

- name: create config dir for zsh
  tags:
    - basics
    - configure-zsh
  file: path={{ host_vars[ansible_hostname].home }}/.config/zsh
        state=directory
  sudo: no

- name: copy zsh files into place
  tags:
    - basics
    - configure-zsh
  copy: src={{ item.src }}
        dest={{ item.dest }}
  sudo: no
  with_items:
    - src: .zshrc
      dest: "{{ host_vars[ansible_hostname].home }}/.zshrc"
    - src: autocomplete
      dest: "{{ host_vars[ansible_hostname].home }}/.config/zsh"

- name: install most basic gui packages
  tags: gui_basics
  apt: name={{ item.name|default(item) }}
       state={{ item.state|default('latest') }}
  with_items:
    - libreoffice
    - thunderbird
    - xfce4-mixer
    - pavucontrol
    - padevchooser
    - shutter
    - chromium-browser
    - pepperflashplugin-nonfree
    - gksu

- name: download skype deb package
  tags:
    - gui_basics
    - skype
  get_url: |
            url="http://download.skype.com/linux/skype-ubuntu-precise_4.3.0.37-1_i386.deb"
            dest="/tmp/skype.deb"
  sudo: no
  when: not all_cmds.results|has_cmd('skype')

- name: install skype from deb package
  tags:
    - gui_basics
    - skype
  apt: deb=/tmp/skype.deb
  when: not all_cmds.results|has_cmd('skype')

- name: download spotify deb package
  tags:
    - gui_basics
    - spotify
  get_url: |
    url="https://dl.dropboxusercontent.com/u/8593574/Spotify/spotify-client_0.8.8.323.gd143501.250-1_amd64.deb"
            dest="/tmp"
  sudo: no
  when: not all_cmds.results|has_cmd('spotify')

- name: install spotify from deb package
  tags:
    - gui_basics
    - spotify
  apt: deb="/tmp/spotify-client_0.8.8.323.gd143501.250-1_amd64.deb"
       state=present
  when: not all_cmds.results|has_cmd('spotify')

- name: install awesomes build dependencies
  tags: awesome
  apt: name={{ item }}
       update_cache=no
       state=latest
  with_items:
    - cmake
    - liblua5.1-dev
    - imagemagick
    - libxcb-randr0-dev
    - libxcb-xtest0-dev
    - libxcb-xinerama0-dev
    - libxcb-shape0-dev
    - libxcb-keysyms1-dev
    - libxcb-icccm4-dev
    - libx11-xcb-dev
    - lua-lgi-dev
    - libstartup-notification0-dev
    - libxdg-basedir-dev
    - libxcb-image0-dev
    - libxcb-util0-dev
    - libgdk-pixbuf2.0-dev
    - lua5.1
    - libxcb-cursor-dev
    - libcairo2-dev
    - libdbus-1-dev
  when: reinstall_awesome or not all_cmds.results|has_cmd('awesome')

- name: download awesome 3.5.6 source
  tags: awesome
  get_url: url=https://awesome.naquadah.org/download/awesome-3.5.6.tar.bz2
           dest=/tmp/awesome-3.5.6.tar.bz2
           mode=0775
           validate_certs=no
  sudo: no
  when: reinstall_awesome or not all_cmds.results|has_cmd('awesome')

- name: untar awesome 3.5.6 source
  tags: awesome
  unarchive: src=/tmp/awesome-3.5.6.tar.bz2
             dest=/tmp
             mode=0775
  sudo: no
  when: reinstall_awesome or not all_cmds.results|has_cmd('awesome')

- name: run make on awesome tarball
  tags: awesome
  command: "{{ item.cmd }} {{ (item.args | default([]) ) | join(' ') }}"
  args:
    chdir: /tmp/awesome-3.5.6
  with_items:
    - cmd: make
    - cmd: cmake
      args:
       - -DCMAKE_PREFIX_PATH=/usr
       - -DSYSCONFDIR=/etc
       - build/.
    - cmd: make install
  when: reinstall_awesome or not all_cmds.results|has_cmd('awesome')

- name: create config dir for awesome under home dir
  tags: awesome
  file: path={{ awesome.config_dir }}
        state=directory
  sudo: no
  when: reinstall_awesome or not all_cmds.results|has_cmd('awesome')

- name: copy awesome config files into newly created config dir
  tags: awesome
  copy: src={{ item.src }}
        dest={{ item.dest | default(awesome.config_dir) }}
        owner={{ item.owner | default(ansible_user_id) }}
        group={{ item.group | default(ansible_user_id) }}
        mode={{ item.mode | default('0666') }}
  sudo: yes
  when: reinstall_awesome or not all_cmds.results|has_cmd('awesome')
  with_items:
    -  src: /usr/local/share/xsessions/awesome.desktop
       dest: /usr/share/xsessions/awesome.desktop
       owner: root
       group: root
       mode: '0600'
    - src: /usr/local/share/awesome/icons
    - src: /usr/local/share/awesome/themes
    - src: /usr/local/share/awesome/lib
    - src: /usr/local/etc/xdg/awesome/rc.lua
      mode: '0644'

- name: set default terminal for awesome
  tags: awesome
  lineinfile: dest={{ awesome.config_dir }}/rc.lua
              regexp='^terminal = "xterm"'
              line='terminal = "xfce4-terminal"'
  when: reinstall_awesome or not all_cmds.results|has_cmd('awesome')
  sudo: no

- name: git clone vivious into awesome config dir
  tags: awesome
  git: repo="http://git.sysphere.org/vicious"
       dest="{{ host_vars[ansible_hostname].home }}/.config/awesome/vicious"
  sudo: no
  when: reinstall_awesome or not all_cmds.results|has_cmd('awesome')

- name: create volume group for wine
  tags: wine
  lvol: vg={{ host_vars[ansible_hostname].lvm.wine.vg }}
        lv={{ host_vars[ansible_hostname].lvm.wine.lv }}
        size={{ host_vars[ansible_hostname].lvm.wine.size | default('1G') }}
        state=present
  when: host_vars[ansible_hostname].lvm.wine is defined

- name: create filesystem on wine lv
  tags: wine
  filesystem: dev=/dev/{{ host_vars[ansible_hostname].lvm.wine.vg }}/{{ host_vars[ansible_hostname].lvm.wine.lv }}
              fstype=ext4
  when: host_vars[ansible_hostname].lvm.wine is defined

- name: create directory for wine prefixes
  tags: wine
  file: path={{ host_vars[ansible_hostname].wine.prefix_dir }}
        state=directory
        mode=0755
        owner=root
        group=root

- name: create entry in fstab for wine prefixes
  tags: wine
  mount: fstype=ext4
         src=/dev/{{ host_vars[ansible_hostname].lvm.wine.vg }}/{{ host_vars[ansible_hostname].lvm.wine.lv }}
         name={{ host_vars[ansible_hostname].wine.prefix_dir }}
         state=mounted
  when: host_vars[ansible_hostname].lvm.wine is defined

- name: create prefix dir for heidi
  tags: heidi
  file: path={{ host_vars[ansible_hostname].wine.prefix_dir }}/heidi
        state=directory
        owner={{ remote_user }}
        group={{ remote_user }}
        mode=0775
  when: reinstall_heidi or not all_cmds.results|has_cmd('heidi')

- name: create new wine prefix for heidi
  tags: heidi
  command: "env WINEPREFIX={{ host_vars[ansible_hostname].wine.prefix_dir }}/heidi wineboot -i"
  sudo: no
  when: reinstall_heidi or not all_cmds.results|has_cmd('heidi')

- name: create download dir in heidi prefix
  tags: heidi
  file: path={{ host_vars[ansible_hostname].wine.prefix_dir }}/heidi/drive_c/Downloads
        state=directory
        owner={{ remote_user }}
        group={{ remote_user }}
        mode=0775
  when: reinstall_heidi or not all_cmds.results|has_cmd('heidi')

- name: download heidi installer
  tags: heidi
  get_url: url=http://www.heidisql.com/installers/HeidiSQL_9.2.0.4947_Setup.exe
           dest={{ host_vars[ansible_hostname].wine.prefix_dir }}/heidi/drive_c/Downloads/heidi-setup.exe
  sudo: no
  when: reinstall_heidi or not all_cmds.results|has_cmd('heidi')

- name: install heidi sql
  tags: heidi
  command: "env WINEPREFIX={{ host_vars[ansible_hostname].wine.prefix_dir }}/heidi
            wine
            {{ host_vars[ansible_hostname].wine.prefix_dir }}/heidi/drive_c/Downloads/heidi-setup.exe"
  sudo: no
  when: reinstall_heidi or not all_cmds.results|has_cmd('heidi')

- name: setup heidi executable under /usr/local/bin
  tags: heidi1
  template: src=heidi.j2
            dest=/usr/local/bin/heidi
            mode=0775
  when: reinstall_heidi or not all_cmds.results|has_cmd('heidi')

- name: install neobundle for vim
  tags: vim
  shell: "curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh"
  sudo: no
  args:
    creates: "{{ host_vars[ansible_hostname].home }}/.vim/bundle/neobundle.vim"

- name: create vim-related folders
  tags:
    - vim
    - vimrc
  file: path={{ host_vars[ansible_hostname].home}}/.vim/{{ item }}
        state=directory
        mode=0775
  sudo: no
  when: reinstall_vimrc or not all_cmds.results|has_cmd('vimrc')
  with_items:
    - vimrc-res
    - after/ftplugin
    - after/syntax

- name: copy vim-related files into place
  tags:
    - vim
    - vimrc
  copy: src={{ item.src }}
        dest={{ host_vars[ansible_hostname].home }}/{{ item.dest|default('') }}
        force=yes
  sudo: no
  with_items:
    - src: .vimrc
    - src: funcs.vim
      dest: .vim/vimrc-res

- name: copy ftplugin files into place
  tags:
    - vim
    - vimrc
  copy: src={{ item }}
        dest={{ host_vars[ansible_hostname].home }}/.vim/after/ftplugin
  when: reinstall_vimrc or not all_cmds.results|has_cmd('vimrc')
  sudo: no
  with_fileglob:
    ftplugin/*.vim

- name: download vidyo client deb
  tags:
    - gui_basics
    - vidyo
  get_url: url="https://vidyoportal.cern.ch/upload/VidyoDesktopInstaller-ubuntu64-TAG_VD_3_3_0_027.deb"
           dest=/tmp/vidyo.deb
  sudo: no
  when: not all_cmds.results|has_cmd('vidyo')

- name: install vidyo client from deb
  tags:
    - gui_basics
    - vidyo
  apt: deb=/tmp/vidyo.deb
  when: not all_cmds.results|has_cmd('vidyo')

- name: install vimchat dependencies
  tags:
    - vim
    - vimchat
  apt: name={{ item }}
       state=latest
       install_recommends=no
  with_items:
    - python-xmpp
    - python-notify
    - python-dns

- name: donwload silversearcher-ag source from github
  git: repo"=https://github.com/mizuno-as/silversearcher-ag"
       dest=/tmp
  sudo: no

- name: install silversearcher-ag from source
  shell: ./build.sh && make install

#- name: check for programs being installed
  #tags:
    #- experimental
  #shell: command -v "{{ item.cmd|default(item.name) }}" >/dev/null 2>&1
  #sudo: no
  #ignore_errors: yes
  #register: has_cmd
  #with_items:
    #- name: ag
      #method: git
      #url: https://github.com/mizuno-as/silversearcher-ag
      #dest: silversearcher-ag
      #install: source
      #shell:
        #cmd: "./build.sh && make install"
      #deps:
        #- automake
        #- pkg-config
        #- libpcre3-dev
        #- zlib1g-dev
        #- liblzma-dev
  #notify:
    #- git clone sources
    #- download sources
    #- install build dependencies
    #- install from source

#- name: download skype deb package
  #tags:
    #- gui_basics
    #- skype
  #get_url: |
            #url="http://download.skype.com/linux/skype-ubuntu-precise_4.3.0.37-1_i386.deb"
            #dest="/tmp/skype.deb"
  #sudo: no
  #when: has_skype|failed

#- name: install skype from deb package
  #tags:
    #- gui_basics
    #- skype
  #apt: deb=/tmp/skype.deb
  #when: has_skype|failed

- name: install virtualbox and vagrant from apt repository
  tags:
    - vagrant
  apt: name={{ item }}
       state=latest
       update_cache=yes
  with_items:
    - virtualbox
    - virtualbox-dkms
    - vagrant
    - nfs-common
    - nfs-kernel-server

- name: create vim-related executables
  tags:
    - vim
    - vim-related
  copy: src={{ item }}
        dest=/usr/local/bin
        mode=075
        force=yes
  with_items:
    - bin/LoadS
    - bin/ListS

- name: setup .ssh config
  tags:
    - ssh
  template: src=dot.ssh.config.j2
            dest={{ host_vars[ansible_hostname].home }}/.ssh/config
            mode=0664
  sudo: no
