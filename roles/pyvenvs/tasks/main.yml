- name: setup pyvenvs root dir
  file: path={{ pyvenvs.root_dir }}
        state=directory
        mode=0755
  sudo: yes

- name: umount all venvs with state == 'absent'
  tags:
    - remove-venvs
  mount: name={{ pyvenvs.root_dir }}/{{ item.name }}
         src=/dev/{{ item.lvm.vg }}/{{ item.lvm.lv }}
         state=absent
         opts={{ item.opts|default(omit) }}
         fstype={{ item.lvm.fstype|default('ext4') }}
  when: item.state is defined and item.state == 'absent'
  sudo: yes
  with_items:
    pyvenvs.list_of_venvs

- name: setup logical volumes for pyenvs
  tags:
    - remove-venvs
  lvol: lv={{ item.lvm.lv }}
        vg={{ item.lvm.vg }}
        size={{ item.lvm.size }}
        state={{ (item.state is defined and item.state != 'mounted' and item.state != 'unmounted')|ternary(item.state, 'present') }}
        force={{ item.force|default('no') }}
  sudo: yes
  when: item.lvm is defined
  with_items:
    pyvenvs.list_of_venvs

- name: initialize filesystems on the lvs for the pyvenvs
  filesystem: dev=/dev/{{ item.lvm.vg }}/{{ item.lvm.lv }}
              type={{ item.lvm.fstype|default('ext4') }}
  when: item.lvm is defined and (item.state is undefined or item.state != 'absent')
  sudo: yes
  with_items:
    pyvenvs.list_of_venvs

- name: setup mount points for pyvens
  file: path={{ pyvenvs.root_dir }}/{{ item.name }}
        state={{ (item.state is defined and item.state == 'absent')|ternary('absent', 'directory') }}
        owner={{ item.owner|default(pyvenvs.default_owner) }}
        group={{ item.group|default(pyvenvs.default_group) }}
        mode=0775
  sudo: yes
  with_items:
    pyvenvs.list_of_venvs

- name: mount the pyvenvs on the specified mount points
  mount: name={{ pyvenvs.root_dir }}/{{ item.name }}
         src=/dev/{{ item.lvm.vg }}/{{ item.lvm.lv }}
         state={{ item.state|default('present') }}
         opts={{ item.opts|default(omit) }}
         fstype={{ item.lvm.fstype|default('ext4') }}
  when: item.lvm is defined and (item.state is undefined or item.state != 'absent')
  sudo: yes
  with_items:
    pyvenvs.list_of_venvs

- name: setup mount points for pyvens
  file: path={{ pyvenvs.root_dir }}/{{ item.name }}
        state={{ (item.state is defined and item.state == 'absent')|ternary('absent', 'directory') }}
        owner={{ item.owner|default(pyvenvs.default_owner) }}
        group={{ item.group|default(pyvenvs.default_group) }}
        mode=0775
  when: item.lvm is defined and (item.state is undefined or item.state != 'absent')
  sudo: yes
  with_items:
    pyvenvs.list_of_venvs

- name: install easy_install3 dependencies
  tags:
    - python
    - python3
  apt: name={{ item }}
       state=latest
  sudo: yes
  with_items:
    - python3-setuptools
    - python3-dev
    - build-essential

# easy_install module will first get a state attribute in version 2.0
- name: install pip3 using easy_install3
  tags:
    - python
    - python3
  easy_install: name=pip
                executable=easy_install3
  sudo: yes

- name: install virtualenv egg for python2 and python3
  tags:
    - python
    - python3
    - pyvenvs-pip
  pip: name=virtualenv
       executable={{ item }}
       extra_args="--upgrade"
  sudo: yes
  with_items:
    - pip2
    - pip3

- name: initialize venvs
  tags:
    - venv-eggs
    - python
    - python3
  command:
    virtualenv -p
    {% if item.python_exe is defined %}
    {{ item.python_exe }}
    {% else %}
    /usr/bin/python{{ item.python_version|default("2") }}
    {% endif %}
    {% if item.site_packages == "yes" %}
      --system-site-packages
    {% endif %}
    {{ pyvenvs.root_dir }}/{{ item.name }}
  when: item.state is undefined or item.state != 'absent'
  sudo: yes
  sudo_user: "{{ item.owner|default('root') }}"
  with_items:
    pyvenvs.list_of_venvs

- name: install external dependencies via apt
  tags:
    - python
    - venv-eggs
    - apt
    - py-apt
  apt: name={{ item.1 }}
       state=present
  sudo: yes
  with_subelements:
    - "{{ pyvenvs.list_of_venvs|with_key('apt') }}"
    - apt

- name: install all eggs via pip
  tags:
    - python
    - venv-eggs
  pip: name={{ item.1.name }}
       executable={{ 'pip'~item.0.python_version|default("pip2") }}
       version={{ item.0.version|default(omit) }}
       virtualenv_site_packages={{ item.0.site_packages|default(omit) }}
       extra_args={{ item.1.extra_args|default(omit) }}
       virtualenv={{ pyvenvs.root_dir}}/{{ item.0.name }}
       virtualenv_command={{ item.0.vevn_cmd|default(omit) }}
  when: item.0.state is undefined or item.0.state != 'absent'
  sudo: yes
  sudo_user: "{{ item.0.owner|default('root') }}"
  with_subelements:
    - pyvenvs.list_of_venvs
    - eggs

- name: setup venv-up command and zsh autocomplete
  tags: zsh
  template: src={{ item.name }}.j2
            dest={{ item.dest }}/{{ item.name }}
            mode={{ item.mode }}
  with_items:
    - name: venv-up
      dest: "{{ ansible_user_dir }}/bin"
      mode: "0775"
    - name: _venv-up
      dest: "{{ zsh.autocomplete }}"
      mode: "0660"
