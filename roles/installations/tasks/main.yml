- name: check for installed programs
  tags:
    - always
  shell: |
          {% if item.findby is not defined or item.findby in ('name', 'cmd') %}
              command -v "{{ item.cmd | default(item.name) }}" >/dev/null 2>&1
          {% elif item.findby == 'directory' %}
              test -d "{{ item.path }}"
          {% elif item.findby == 'file' %}
              test -f "{{ item.path }}"
          {% elif item.findby == 'custom' %}
              {{ item.shellcmd }}
          {% endif %}
  sudo: no
  ignore_errors: yes
  register: all_cmds
  with_items:
    installations

- name: install all dependencies
  tags:
    - installations
  apt: name={{ item.1 }}
       state=latest
       update_cache=no
  when: not all_cmds.results|has_cmd(item.0.name)
  with_subelements:
    - "{{ installations|with_key('deps') }}"
    - deps

- name: download all sources
  tags:
    - installations
  get_url: url={{ item.url }}
           dest={{ dest_dir }}/{{ item.dest }}
  when: not all_cmds.results|has_cmd(item.name) and item.url is defined
  sudo: no
  with_items:
    installations|rejectval('method', 'git')

- name: git clone installation sources
  tags:
    - installations
  git: repo={{ item.url }}
       dest={{ dest_dir }}/{{ item.dest }}
  sudo: no
  when: not all_cmds.results|has_cmd(item.name)
  with_items:
    installations|byval('method', 'git')

- name: install all targets from source
  tags:
    - installations
  shell: "{{ item.shell.cmd }}"
  args:
    chdir: "{{ dest_dir }}/{{ item.dest }}"
  sudo: "{{ item.sudo | default('no') }}"
  when: not all_cmds.results|has_cmd(item.name)
  with_items:
    installations|byval('install', 'source')

- name: install all debs
  tags:
    - installations
  apt: deb={{ dest_dir }}/{{ item.dest }}
       update_cache=no
  when: not all_cmds.results|has_cmd(item.name)
  with_items:
    installations|byval('method', 'deb')
